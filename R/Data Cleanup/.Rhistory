library(readr)
orders = read_csv("orders-2020.csv", col_types = cols(Refunded = col_character(), Paid = col_character()))
library(tidyverse)
#Testing here to see if the items column contains any @'s. Since it doesn't, we will insert @'s at key locations to split the data later on
orders %>% filter(grepl('@', `Item(s)`))
orders$`Item(s)` = gsub('(?<=\\.[0-9][0-9])(?=[A-Za-z0-9])', ' @ ', orders$`Item(s)`, perl = TRUE)
#Trying to find out how many @'s there are in each row by making a new column that counts the number of @'s
library(stringr)
orders$problem_count = str_count(orders$`Item(s)`, '@')
unique(orders$problem_count)
#looks like there are 0-15 items in each row
item_split = strsplit(orders$`Item(s)`, split = ' @ ')
better_item_df = data.frame(Order_ID = rep(orders$`Order ID`, sapply(item_split, length)), item = unlist(item_split))
#Lets split this new dataframe's item column into 4 columns. First we will split into 3 and then create the 4th at the end
even_better_item_df = better_item_df %>%
separate(item,
c('item_sku', 'item_name', 'quant_price'),
' / ')
almost_best_item_df = even_better_item_df %>%
separate(quant_price,
c('quantity', 'price'),
' Ã— ')
test = orders
test[, 10] = as.numeric(gsub("[\\$,]", "", orders[, 10]))
View(orders)
test[, 10] = gsub("[\\$,]", "", orders[, 10])
View(test)
test = orders
test = orders
test$Tax = gsub('[$]', test$Tax)
test$Tax = gsub('[$]', '', test$Tax)
test$Tax = as.numeric(gsub(',', '', test$Tax))
View(test)
test = orders
test[, 10] = gsub('[$]', '', test[, 10])
View(almost_best_item_df)
orders$Tax = gsub('[$]', '', orders$Tax)
orders$Tax = as.numeric(gsub(',', '', orders$Tax))
orders$Shipping = gsub('[$]', '', orders$Shipping)
orders$Shipping = as.numeric(gsub(',', '', orders$Shipping))
orders$Discount = gsub('[$]', '', orders$Discount)
orders$Discount = as.numeric(gsub(',', '', orders$Discount))
orders$Refunded = gsub('[$]', '', orders$Refunded)
orders$Refunded = as.numeric(gsub(',', '', orders$Refunded))
orders$Paid = gsub('[$]', '', orders$Paid)
orders$Paid = as.numeric(gsub(',', '', orders$Paid))
orders$`Total Invoiced` = gsub('[$]', '', orders$`Total Invoiced`)
orders$`Total Invoiced` = as.numeric(gsub(',', '', orders$`Total Invoiced`))
orders$`Grand Total` = gsub('[$]', '', orders$`Grand Total`)
orders$`Grand Total` = as.numeric(gsub(',', '', orders$`Grand Total`))
orders$`Gross Profit` = gsub('[$]', '', orders$`Gross Profit`)
orders$`Gross Profit` = as.numeric(gsub(',', '', orders$`Gross Profit`))
almost_best_item_df$price = gsub('[$]', '', almost_best_item_df$price)
almost_best_item_df$price = as.numeric(gsub(',', '', almost_best_item_df$price))
#Use janitor to clean column names
library(janitor)
clean_names(orders)
orders = clean_names(orders)
#Create new column in almost_best_item_df that will have a new total_invoiced
almost_best_item_df$quantity = as.numeric(almost_best_item_df$quantity)
View(almost_best_item_df)
almost_best_item_df$total_invoiced_2 = almost_best_item_df$quantity * almost_best_item_df$price
#Let's create a tax rate for each order ID. Taxes are usually applied after discounts, but depending on the state it will apply either before or after shipping
#I am going to assume it applies before shipping, not after
orders$tax_rate = orders$tax/(orders$gross_profit + orders$discount)
#Let's also get a discount rate
orders$discount_rate = orders$discount/orders$gross_profit
almost_best_item_df$gross_profit_2 = almost_best_item_df$quantity * almost_best_item_df$price
subset(almost_best_item_df, select = -(total_invoiced))
subset(almost_best_item_df, select = -(total_invoiced_2))
almost_best_item_df = subset(almost_best_item_df, select = -(total_invoiced_2))
which(orders$paid == orders$total_invoiced)
which(orders$paid != orders$total_invoiced)
orders$paid[10954]
orders = orders[1:10953, ]
which(orders$paid != orders$total_invoiced)
which(orders$paid != orders$grand_total)
orders = subset(orders, select = -c('paid', 'total_invoiced'))
orders = subset(orders, select = -c(paid, total_invoiced))
View(orders)
#Random but I forgot to drop the item column since we don't need it anymore so let's do that
orders = subset(orders, select = -item_s)
orders %>% rename(item_count = problem_count)
orders = orders %>% rename(item_count = problem_count)
orders$item_count = orders$item_count+1
#Now, we've reached a point where we can use column multiplication to recreate all of the price related columns, with the exception of shipping and refunded
#Refunded isn't much of an issue since there are only 22 rows that have refunds. Additionally, since the refunds match the totals, this would imply that
#the entire order was refunded. So we can just match the order ID's to the refunds and recreate them by copying the price column
#Let's create a new refund column that contains TRUE or FALSE based on whether or not it was refunded
orders$refund_status = is.na(orders$refunded)
#Now, we've reached a point where we can use column multiplication to recreate all of the price related columns, with the exception of shipping and refunded
#Refunded isn't much of an issue since there are only 22 rows that have refunds. Additionally, since the refunds match the totals, this would imply that
#the entire order was refunded. So we can just match the order ID's to the refunds and recreate them by copying the price column
#Let's create a new refund column that contains TRUE or FALSE based on whether or not it was refunded
orders$refund_status = !is.na(orders$refunded)
#Shipping is somewhat more annoying, but for this let's go simple and evenly divide shipping amongst each item in the order
#We'll use the item_count column we made for this
orders$shipping_per_item = orders$shipping/orders$item_count
#Just made new data frame that contains the items split up into different rows. Going to join this with the old dataset using order id as key
joined_orders = almost_best_item_df %>%
left_join(orders, by = c('Order_ID' = 'order_id'))
View(joined_orders)
#Now that the tables have been joined, we want to remove the unwanted extra columns from the orders data frame that were added
joined_orders = joined_orders %>%
select(-c(quantity_ordered, tax, shipping, discount, gross_profit, grand_total, refunded))
#Gross profit is named incorrectly so rectifying that
joined_orders = joined_orders %>%
rename(gross_profit = gross_profit_2)
#Now we need to recreate new tax, discount, grand_total, and refunded columns
joined_orders$discount = joined_orders$discount_rate*joined_orders$gross_profit
joined_orders$tax = joined_orders$tax_rate*(joined_orders$gross_profit + joined_orders$discount)
joined_orders = joined_orders %>%
rename(shipping = shipping_per_item)
joined_orders$grand_total = joined_orders$tax + joined_orders$shipping + joined_orders$discount + joined_orders$gross_profit
length(joined_orders)
length(joined_orders$refund_status)
joined_orders$refund = 0
if(TRUE){print('hello')}
for(i in 1:joined_orders$refund_status){
if(joined_orders$refund_status[i]){
joined_orders$refund[i] = joined_orders$grand_total
}
}
if(joined_orders$refund_status[i]){
joined_orders$refund[i] = joined_orders$grand_total
}
if(joined_orders$refund_status[i]==TRUE){
joined_orders$refund[i] = joined_orders$grand_total
}
joined_orders$refund[1] = 2
joined_orders$refund = 0
for(i in 1:length(joined_orders$refund_status)){
if(joined_orders$refund_status[i]==TRUE){
joined_orders$refund[i] = joined_orders$grand_total[i]
}
}
if(joined_orders$refund_status[i]){
joined_orders$refund[i] = joined_orders$grand_total[i]
}
joined_orders$refund_status %>% is.na() %>% which()
test = joined_orders[22082, ]
View(test)
joined_orders = joined_orders[1:22081, ]
joined_orders$refund = 0
for(i in 1:length(joined_orders$refund_status)){
if(joined_orders$refund_status[i]){
joined_orders$refund[i] = joined_orders$grand_total[i]
}
}
#Columns are all there, final step is to rearrange columns for clarity
joined_orders = clean_names(joined_orders)
joined_orders = joined_orders %>%
relocate(order_number,
.before = order_id)
joined_orders = joined_orders %>%
relocate(invoice_number:coupon,
.after = order_id)
joined_orders = joined_orders %>%
relocate(price,
.before = quantity)
joined_orders = joined_orders %>%
relocate(tax,
.after = quantity)
joined_orders = joined_orders %>%
relocate(shipping:grand_total,
.after = tax)
joined_orders = joined_orders %>%
relocate(refund,
.after = grand_total)
View(almost_best_item_df)
#Behold joined_orders in all it's glory. This took roughly 4 hours.
write.csv(almost_best_item_df, 'orders-2020-clean.csv')
#Behold joined_orders in all it's glory. This took roughly 4 hours.
write.csv(joined_orders, 'orders-2020-clean.csv')
View(joined_orders)
